name: SecAI Backend Docker Image
on:
  workflow_dispatch:
    inputs:
      update_ecs:
        description: "Update AWS ECS Service"
        required: true
        default: false
        type: boolean

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECS_CLUSTER_NAME: ${{ secrets.AWS_ECS_CLUSTER_NAME }}
  ECS_SERVICE_NAME: ${{ secrets.AWS_ECS_SERVICE_NAME }}
  ECS_TASK_DEFINITION_FAMILY: ${{ secrets.AWS_ECS_TASK_DEFINITION_FAMILY }}
  CONTAINER_NAME_IN_TASK_DEF: ${{ secrets.AWS_ECS_CONTAINER_NAME_IN_TASK_DEF }}
  TEMP_TASK_DEFINITION_FILE: task-definition.json

jobs:
  build-and-push-backend:
    runs-on: ubuntu-latest
    outputs:
      image_version: ${{ steps.set-image-tag.outputs.IMAGE_VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Define Image Tag and Set Output
        id: set-image-tag
        run: |
          IMAGE_VERSION="v0.1.${{ github.run_number }}"
          echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_OUTPUT
          echo "Generated Image Version: $IMAGE_VERSION"

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/secai-backend:v0.1.${{ github.run_number }}

  deploy-to-ecs:
    runs-on: ubuntu-latest
    needs: build-and-push-backend
    if: ${{ needs.build-and-push-backend.outputs.image_tag != '' && github.event.inputs.update_ecs == 'true' }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Full Image Tag
        id: full-tag
        run: |
          FULL_IMAGE_TAG="${{ env.DOCKER_USERNAME }}/secai-backend:${{ needs.build-and-push-backend.outputs.image_version }}"
          echo "FULL_IMAGE_TAG=$FULL_IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Reconstructed Full Image Tag: $FULL_IMAGE_TAG"

      - name: Downloading Task Definition from AWS
        id: download-task-def
        run: |
          echo "Downloading Task Definition: ${{ env.ECS_TASK_DEFINITION_FAMILY }}"
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION_FAMILY }} \
            --query taskDefinition \
            --output json > ${{ env.TEMP_TASK_DEFINITION_FILE }}

      - name: Updating Amazon ECS Task Definition with New Image
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.TEMP_TASK_DEFINITION_FILE }}
          container-name: ${{ env.CONTAINER_NAME_IN_TASK_DEF }}
          image: ${{ steps.full-tag.outputs.FULL_IMAGE_TAG }}

      - name: Deploy to Amazon ECS Service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          service: ${{ env.ECS_SERVICE_NAME }}
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          wait-for-service-stability: true
